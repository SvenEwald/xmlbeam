Tutorial 2

*E02: Reading a Jenkins Job Configuration

%{include|source-content-type=apt|source=src/site/apt/t02_desc.txt}

 In the last example we demonstrated a sub projection pretending a non existing element.
 This time we like to define some model classes for a Jenkins job configuration and project existing elements to them.
 But there is one little hurdle: We can not know the exact XML structure, because Jenkins plugins contribute new elements with different names.
 Our model would have to include one class for each contributed element, but we like to keep the number of model classes low.
 
 The solution to this shows: 
  
 * Usage of XPath wildcards.
   Mapping of varying elements to one Java object. 
 
 * Automatic conversion of sequences to lists and arrays utilizing Java generics to provide a static typed API.
   
 * Declarative document origins.
   Just add a source URL via annotation, let the framework get the document.
   
 * Inheritance in projection interface.
   Java interface inheritance is still supported in projection interfaces.     

 []
  
 Instead of defining one model class for each element, we project all elements doing the same stuff to the same model object. 
 This is done by using XPath wildcards that will simply select all elements in a defined subtree. 
 Of course we define a getter method to give us the element name, so we can use our model to find out what which elements are really in there. 
   
 
**XML Content

**Model Interfaces   

 Our example should read all builder and all publisher elements in the configuration file.
 We like to know the element names of both, so we define a super interface "ModelElement" and let our model objects extend it.

%{include|highlight-theme=eclipse|show-gutter=false|snippet=#JenkinsModelElementInterface|source=src/test/java/org/xmlbeam/tutorial/e02_jenkins/model/ModelElement.java}
%{include|highlight-theme=eclipse|show-gutter=false|snippet=#JenkinsPublisherInterface|source=src/test/java/org/xmlbeam/tutorial/e02_jenkins/model/Publisher.java}
%{include|highlight-theme=eclipse|show-gutter=false|snippet=#JenkinsBuilderInterface|source=src/test/java/org/xmlbeam/tutorial/e02_jenkins/model/Builder.java}

** Projection API 

 Now that we have our model objects defined, we need to define how to retrieve them. 

%{include|highlight-theme=eclipse|show-gutter=false|snippet=#JenkinsJobConfigInterface|source=src/test/java/org/xmlbeam/tutorial/e02_jenkins/JenkinsJobConfig.java}
