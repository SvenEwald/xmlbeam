API Reference

 Short API reference examples

%{toc|section=1|fromDepth=2|toDepth=3}

*Projection Interfaces

 You define your projection interfaces with getter, setter or deleter methods.
 The interface must be public and may be annotated with the @XBDocURL annotation.
 
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCardI|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

*XBProjector

 Use the XBProjetor class to create, read or write projections.

**Create a XBProjector instance
 
 A XMLBeam projector is created with it's default constructor.
 Alternatively you may pass a XMLFactoriesConfiguration to inject other DocumentBuilders, Transformers or XPath implementations.

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard0|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java} 

**Create a projection from scratch

 You may start with an empty document and create the content by writing projection methods.
 Projections can be bidirectional.
 
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard1|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

**Parse some XML String
 
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard2|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

**Convert a projection to a String

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard2b|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

**Create a projection for a DOM Document or Element

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard3|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

**Read or write a projection to a file

 Read XML documents directly into projections or write XML files with one line of code.
 
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard4|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

**Read or write a projection with a document origin annotation "@XBDocURL"

 You may delegate the specification of the document origin to the projection interface. 

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard5|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

**Read or write a projection from or to a given URL

   Writing is supported for the protocols file, HTTP and HTTPS.
   HTTP writing means to post the document to the given URL.
   Reading supports the additional protocol "resource" to get documents from Java resources.
   It will use the class loader of the projection interfaces.
   
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard6|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

**Adding HTPP headers for get/post requests

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard7|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

**You may want to obtain properties for HTTP Basic authentication

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard8|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

**Read or write a projection via Input/Outputstream

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard9|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

**Let a projection return a custom type that can be created with a String

  To let a projection method return a custom type like this...
  
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard10|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

  ... you have to define a String-constructor
  
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard11|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

  ... or define a static factory method named "valueOf", "of", "parse" or "getInstance"

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard12|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}  

* Dynamic Projections

 Dynamic Projections may change the XPath during runtime using parameters of the projection method.
 There are two ways to use method parameters in XPath expressions:
 
 * XPath variables: Parameters are bound to XPath variables.
   The first parameter can be referred by '$PARAM0' or alternatively '$ARG0'. 
   The second parameter by '$PARAM1' or '$ARG1'.
   Variable names are case insensitive, thus '$Param2' and '$param2' refer both to the third parameter of the projection method.
   These variables may be decorated by {{{./formatfeature.html} format specifications}}.
 
 * Preprocessor: If you need to change more than just values (e.g. the structure of the XPath), you can do this by using the build in preprocessor.
   The place holders are '\{PARAM0\}', '\{ARG0\}' or just '\{0\}' for the first parameter, '\{PARAM1\}', '\{ARG1\}', '\{1\}' for the second and so on...
   Like the variables, these tokens are case insensitive.
   Preprocessor place holders are slower on multiple method invocations, because the XPath expression needs to be compiled every time.  

**Use parameter names in dynamic projections
 
 You have to use Java 8 and set the javac option "-parameters" for your projection interfaces. Then you can do something like this:

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard13|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

 instead of the pre Java 8 solution:
 
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#XBProjectorReferenceCard14|source=src/test/java/org/xmlbeam/refcards/XBProjectorReferenceCard.java}

 Of course, this works with XPath variables, too. 

* Annotations

** @XBDocURL
 
 This annotation may be used on a projection interface do declare a document origin.
 When the document is fetched from this URL, this value becomes the system id.
 As any other annotation string values the URL may contain preprocessor place holders ("\{n\}", where n=0,1,2... is a parameter index).
 
 When attached to a getter method in a projection interface, this is called an external projection. 
 The getters XPath expression will be evaluated on the document fetched from this URL.  

** @XBRead

 This annotation is used to mark a method as getter. A XPath expression is required as value and the method must have one of the following return types:
 
 * a primitive value.
 
 * a String
 
 * a (sub) projection interface
 
 * a class with a String constructor
 
 * a class with a static factory method called 'valueOf(String)', 'of(String)', 'parse(String)', 'getInstance(String)' 
 
 * a DOM-Node (if you need access to the DOM behind the projection). 
 
 []
 
 or a list, array, Stream or Optional of any of these types.
  

** @XBWrite

 Marking a method with @XBWrite declares it as a setter. The annotation takes a XPath expression as parameter.
 Notice that only a subset of the XPath syntax is valid for setters. The expression result must be a Node or NodeSet.
 (Otherwise there would be no place to store the value, right?)
 
** @XBUpdate

 This annotation declares a projection method to update single values on one or more nodes (elements or attributes).
 In contrast to @XBWrite, here the XPath syntax is not limited.
  
** @XBDelete

 The easiest way to remove something from a document is to declare a deleter method.
 Again this annotation takes a XPath expression as parameter.
 Again only XPath expressions selecting Nodes or NodeSets are valid here.  

** @XBAutoBind

 The return type must be a List or the special type XBAutoValue. 
 Changes to the List are directly applied to the XML structure.
 This is a very convenient way of adding or removing elements.
 Changes to the XBAutoValue object directly change a single element or attribute value.
 If the return type of the projection method is list, the XPath expression must select a NodeSet.
 

** @XBOverride

 It's not possible for Java 8 default methods to override a method inherited from Object. 
 This is bad if you want to have your own hashCode or toString method implemented as a default method.
 With this annotation you can declare a default method with a different name (e.g. "toString_") and declare it to be used when Object.toString() is called.
 (@XBOverride("toString"))

** Annotation on method parameters

*** @XBValue

  A setter must have at least one parameter.
  If you choose to declare more than one parameter (because you use them as MessageFormat parameters) then you should mark the parameter to be set in the document with this annotation.
  If you don't, the first parameter will be the "setting parameter".
  
* Projected Values & Lists

 By default, projection methods return immutable objects without side effects. But there are two special Types that change the underlying document.
 
** ProjectedList

----------------------------------------
<xml>
   <list>
      <entry>foo</entry>
      <entry>bar</entry>
   </example>
</xml>
----------------------------------------

 Defining a projection method returning a ProjectedList 
 
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#ProjectedListRefCardExample|source=src/test/java/org/xmlbeam/refcards/ProjectedListRefCard.java}

 allowes to directy change the xml document:

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#ProjectedListRefCardExample2|source=src/test/java/org/xmlbeam/refcards/ProjectedListRefCard.java}

 The result will be
 
----------------------------------------
<xml>
   <list>
      <entry>foo</entry>
      <entry>bar</entry>
      <entry>New Entry</entry>
   </example>
</xml>
----------------------------------------

** Projected<T> 
 
   