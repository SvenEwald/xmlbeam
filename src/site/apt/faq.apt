
FAQ / HowTo

* How to determine if an element or attribute exists? 

 It's not possible to distinguish between empty values and non existing values.
 Getting a string value from non existing elements or attributes returns an empty string.
 You will never get a null value from projections returning a string.
 It is even a common practice to omit empty elements in documents.
 There are two ways to determine if an element exists:
 
 * Project the element to an empty sub projection. 
   This will return null if the element is not present.
   You may even reuse the sub projection interface for all elements to be examined.
   
 * Use a XPath function to create a boolean projection: "count(/path/element) > 0"

* What's the syntax for writable XPath expressions?

 XPath expressions used in setters are limited to absolute paths to nonambiguous selectors. 
 Functions are not allowed. 
 The reason for this is to make a setter executable regardless of the current document structure, having a reproduceable result. 
 
** Changing attributes

   Example: "/element1/element2/@AttributeName"
   This works for any setter value that is not a projection nor a collection. 
   The toString() method will be used to create the attribute value.  

** Changing element values

   Example: "/element1/element2"
   This works for any setter value that is not a projection nor a collection. 
   The toString() method will be used to create the attribute value.
      
** Changing  child elements

   Example: "/element1/element2/*"
   This works for projections or collections of projections only.
   If your setter value is a projection, all existing elements with the same element name will be removed and a single element will be attached.
   
* How to access the DOM behind a projection?

 Every projection is associated with a document, every sub projection with a DOM element.
 To access the DOM Node you may either:
 
  * Let your projection extend the interface org.xmlbeam.dom.DOMAccess.
    You will inherit getter methods for the document and the current node. 
  
  * Cast your projection directly to DOMAccess. 
    The projector makes sure that every projection instance implements this interface.  
    
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#Projection|source=src/test/java/org/xmlbeam/refcards/FAQSnippets.java}    
   
* How do I implement the toString() method for my projection?

 You want to create a mixin: 
 
%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#MixinOverridingToString|source=src/test/java/org/xmlbeam/refcards/FAQSnippets.java}

 And register it in your projector:

%{include|charset=UTF-8|highlight-theme=eclipse|show-gutter=false|snippet=#MixinRegistration|source=src/test/java/org/xmlbeam/refcards/FAQSnippets.java}

* Why does the projector not cache values?

 Caching is not a concern of this library. Implement your own cache to avoid unnecessary XPath overhead.
 The projector does not know anything about the purpose of the data it reads.
 To be able to circumvent unexpected caching side effects you need knowledge about the application context. 